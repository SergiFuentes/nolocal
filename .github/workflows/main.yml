name: CI
on:
  workflow_dispatch:
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.0.0
      - name: Setup Kotlin
        uses: actions/setup-java@v3.1.1
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Gradlew Check
        run: | 
           chmod +x ./gradlew
           ./gradlew --no-daemon check
      - name: Codecov coverage report upload
        uses: codecov/codecov-action@v3.0.0
        with:
          files: ./build/reports/jacoco/test/jacocoTestReport.xml,./build/reports/jacoco/jacocoIntegrationTestReport/jacocoIntegrationTestReport.xml
  BuildDocs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0
      - name: Setup Python
        uses: actions/setup-python@v3.1.2
      - name: Build docs
        run: |
          pip install mkdocs
          pip install mkdocs-material
          pip install mkdocs-git-revision-date-localized-plugin
          mkdocs build
      - name: Upload docs
        uses: actions/upload-artifact@v3.0.0
        with:
          path: site/
          name: documentation
      - name: Github Pages Deploy
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          publish_dir: site/
          publish_branch: github-actions
  Snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.0.0
      - name: Snyk
        run: |
            chmod +x ./gradlew
            brew tap snyk/tap
            brew install snyk
            snyk auth ${{secrets.SNYK_TOKEN}}
            snyk monitor
  SetUpCaddy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.0.0
      - name: Docker login
        uses: docker/login-action@v1.14.1
        with:
          username: davidtca
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Docker build & push
        uses: docker/build-push-action@v2.10.0
        with:
          context: ./caddy
          push: true
          tags: davidtca/caddy-discord:latest
  PrepareImage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.0.0
      - name: Setup Kotlin
        uses: actions/setup-java@v3.1.1
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build Jar
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon bootJar
      - name: Rename Jar
        run: cp ./build/libs/$(ls ./build/libs/ | grep nolocal) nolocal.jar
      - name: Publish Jar
        uses: actions/upload-artifact@v3.0.0
        with: 
          path: ./nolocal.jar
      - name: Publish compose
        uses: actions/upload-artifact@v3.0.0
        with:
          path: ./docker-compose.yml
          name: compose
      - name: Docker login
        uses: docker/login-action@v1.14.1
        with:
          username: davidtca
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Docker build & push
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          push: true
          tags: davidtca/nolocal:latest
  PrepareOracleCLoud:
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.getIP.outputs.ip }}
    steps:
      - name: Install Oracle Cloud Infrastructure CLI
        uses: bytesbay/oci-cli-action@v1.0.2
        with:
          user: ${{secrets.OCI_USER_OCID}}
          fingerprint: ${{secrets.OCI_FINGERPRINT}}
          tenancy: ${{secrets.OCI_TENANCY}}
          region: ${{secrets.OCI_REGION}}
          api_key: ${{secrets.OCI_KEY_FILE}}
      - name: Set up ssh keys
        run: |
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub
      - name: Check existing instance
        run: |
            echo "INSTANCE_OCID=$( \
                oci compute instance list \
                --lifecycle-state RUNNING \
                --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
                --display-name nolocal \
                --query "data [0].id" \
                --raw-output \
            )" >> $GITHUB_ENV
      - name: Create Instance
        id: create
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
              --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
              --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
              --shape ${{secrets.VM_SHAPE}} \
              --assign-public-ip true \
              --display-name nolocal \
              --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
              --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
              --subnet-id ${{secrets.VM_SUBNET_OCID}} \
              --wait-for-state RUNNING \
              --query "data.id" \
              --raw-output \
          )" >> $GITHUB_ENV
          echo "::set-output name=created::true"
      - name: Get Instance IP
        id : getIP
        run: |
          echo "::set-output name=ip::$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )"
      - name: Update DuckDNS IP
        run: |
          curl 'https://www.duckdns.org/update?domains=botnolocal&token=${{secrets.DUCKDNS_TOKEN}}&ip=${{ steps.getIP.outputs.ip }}'
      - name: SSH wait
        run: |
          while ! nc -w5 -z ${{ steps.getIP.outputs.ip }} 22; do
                  sleep 5
                  echo "SSH not available, retrying..."
          done; echo "SSH ready!"
      - name: Prepare machine
        if: ${{ steps.create.outputs.created }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.getIP.outputs.ip }}
          username: ubuntu
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            sudo iptables -I INPUT 6 -m state --state NEW -p tcp --match multiport --dports 443 -j ACCEPT
            sudo netfilter-persistent save
            sudo apt-get install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
            sudo apt-get update -y
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose -y
  Deploy:
    runs-on: ubuntu-latest
    needs: [ Check, Snyk, PrepareImage, BuildDocs, PrepareOracleCLoud, SetUpCaddy]
    steps:
      - name: Download the docker-compose file
        uses: actions/download-artifact@v3.0.0
        with:
          name: compose
          path: .
      - name: Push compose using tortilla
        uses: betanzos/scp-upload@v1
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo docker-compose pull
            sudo docker-compose up -d nolocal caddy
