name: Concurrent Pipeline
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Kotlin
        uses: fwilhe2/setup-kotlin@0.2.0
        with:
          version: 1.5.31
      - name: Gradlew Check
        run: | 
           chmod +x ./gradlew
           ./gradlew --no-daemon check
      - name: Codecov coverage report upload
        uses: codecov/codecov-action@v2.1.0 
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  BuildDocs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.4.1
      - name: Build docs
        run: |
          cd docs
          npm install
          npm run build
      - name: Upload docs
        uses: actions/upload-artifact@v2.2.4
        with:
          path: docs/build/
          name: documentation
      - name: Github Pages Deploy
        uses: tsunematsu21/actions-publish-gh-pages@v1.0.2
        with:
          dir: ./docs/build/
          branch: docs
          token: ${{secrets.TOKEN_GITHUB}}

  Snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Snyk
        run: |
            chmod +x ./gradlew
            brew tap snyk/tap
            brew install snyk
            snyk auth ${{secrets.SNYK_TOKEN}}
            snyk monitor

  PrepareJar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Kotlin
        uses: fwilhe2/setup-kotlin@0.2.0
        with:
          version: 1.5.31
      - name: Build Jar
        env:
          DISCORD_TOKEN: ${{secrets.DISCORD_TOKEN}}
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon bootJar
      - name: Rename Jar
        run: mv ./build/libs/$(ls ./build/libs/ | grep nolocal) nolocal-new.jar
      - name: Publish Jar
        uses: actions/upload-artifact@v2.2.4
        with: 
          path: ./nolocal-new.jar

  PrepareOracleCLoud:
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.getIP.outputs.ip }}
    steps:
      - name: Install Oracle Cloud Infrastructure CLI
        uses: bytesbay/oci-cli-action@v1.0.2
        with:
          user: ${{secrets.OCI_USER_OCID}}
          fingerprint: ${{secrets.OCI_FINGERPRINT}}
          tenancy: ${{secrets.OCI_TENANCY}}
          region: ${{secrets.OCI_REGION}}
          api_key: ${{secrets.OCI_KEY_FILE}}
      - name: Set up ssh keys
        run: |
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub
      - name: Check existing instance
        run: |
            echo "INSTANCE_OCID=$( \
                oci compute instance list \
                --lifecycle-state RUNNING \
                --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
                --display-name nolocal \
                --query "data [0].id" \
                --raw-output \
            )" >> $GITHUB_ENV
      - name: Create Instance
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
              --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
              --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
              --shape ${{secrets.VM_SHAPE}} \
              --assign-public-ip true \
              --display-name nolocal \
              --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
              --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
              --subnet-id ${{secrets.VM_SUBNET_OCID}} \
              --wait-for-state RUNNING \
              --query "data.id" \
              --raw-output \
          )" >> $GITHUB_ENV
      - name: Get Instance IP
        id : getIP
        run: |
          echo "::set-output name=ip::$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )"
      - name: SSH wait
        run: |
          while ! nc -w5 -z ${{ steps.getIP.outputs.ip }} 22; do
                  sleep 5
                  echo "SSH not available, retrying..."
          done; echo "SSH ready!"
      - name: Prepare machine
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.getIP.outputs.ip }}
          username: ubuntu
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            sudo apt install openjdk-11-jre-headless -y
            sudo iptables -I INPUT 6 -m state --state NEW -p tcp --match multiport --dports 8080 -j ACCEPT
            sudo netfilter-persistent save

  Deploy:
    runs-on: ubuntu-latest
    needs: [ Check, Snyk, PrepareJar, BuildDocs, PrepareOracleCLoud]
    steps:
      - name: Download the nolocal jar artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: artifact
          path: .
      - name: Push JAR using tortilla
        uses: betanzos/scp-upload@v1
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "./nolocal-new.jar"
      - name: Stop App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            pid=`ps aux | grep "nolocal" | grep -v "grep" | awk '{print $2}'`
            if [ "$pid" == "" ]; then
              echo "Process not found"
            else
              kill -9 $pid
            fi
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            mv nolocal-new.jar nolocal.jar -f
            nohup java -jar ~/nolocal.jar > output.$(date --iso).log 2>&1 &
